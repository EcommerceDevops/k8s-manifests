

environments:
  development:
    values:
      - "./config/default/values.yaml"
      - value:
        - "./config/development/values.yaml"
        missingFileHandler: Skip

  staging:
    values:
      - "./config/default/values.yaml"
      - "./config/staging/values.yaml" # Has the chaos mesh basic configuration on ir
        
repositories:
  - name: linkerd-edge
    url: https://helm.linkerd.io/edge
  - name: linkerd
    url: https://helm.linkerd.io/stable
  - name: chaos-mesh
    url: https://charts.chaos-mesh.org



hooks:
  - name: "Create prerequisite private-registry-sa ServiceAccount"
    events: ["prepare"]
    showlogs: true
    command: "kubectl"
    args:
      - "apply"
      - "-f"
      - "./ksa/private-registry.yaml"
      
  - name: "Annotate Default Namespace for Linkerd Injection"
    events: ["prepare"]
    showlogs: true
    command: "kubectl"
    args:
      - "annotate"
      - "namespace"
      - "default"
      - "linkerd.io/inject=enabled"
      - "--overwrite"

  - name: "Stablish argo-rollouts"
    events: ["prepare"]
    showlogs: true
    command: "bash"
    args:
      - "-c"
      - |
        # Salir inmediatamente si un comando falla
        set -e
        kubectl create namespace argo-rollouts || true
        kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
        kubectl apply -n argo-rollouts -f ./argo-rollouts/gateway-plugin.yaml
        kubectl apply  -f ./argo-rollouts/rbac.yaml
---
releases:
  - name: linkerd-crds
    namespace: '{{ .Values | get "linkerd.namespace" "linkerd" }}'
    chart: linkerd-edge/linkerd-crds
    version: "2025.5.4"
    values:
      - installGatewayAPI: {{ .Values | get "linkerd.installGatewayAPI" true }}

  - name: linkerd-control-plane
    namespace: '{{ .Values | get "linkerd.namespace" "linkerd" }}'
    chart: linkerd-edge/linkerd-control-plane
    version: "2025.5.4"
    needs:
      - '{{ .Values | get "linkerd.namespace" "linkerd" }}/linkerd-crds'
    values:
      - "./config/development/secrets/linkerd-secrets.yaml"
      - proxyInit:
          runAsRoot: true
    hooks:
      - name: "Wait for Linkerd CRDs to be established"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            CRDS_TO_WAIT_FOR=(
              "authorizationpolicies.policy.linkerd.io"
              "egressnetworks.policy.linkerd.io"
              "externalworkloads.workload.linkerd.io"
              "httplocalratelimitpolicies.policy.linkerd.io"
              "httproutes.policy.linkerd.io"
              "meshtlsauthentications.policy.linkerd.io"
              "networkauthentications.policy.linkerd.io"
              "serverauthorizations.policy.linkerd.io"
              "servers.policy.linkerd.io"
              "serviceprofiles.linkerd.io"
            )
            echo "Waiting for Linkerd CRDs to be established before deploying control-plane..."
            for crd in "${CRDS_TO_WAIT_FOR[@]}"; do
              echo "Waiting for CRD: $crd"
              kubectl wait --for condition=established "crd/$crd" --timeout=600s
            done
            echo "All specified Linkerd CRDs are established."

  - name: ingress
    namespace: ingress
    createNamespace: true 
    chart: oci://ghcr.io/nginx/charts/nginx-ingress
    version: 2.1.0
    values:
      - controller:
          scope:
            enabled: false # Disable scope to allow cross-namespace ingress


  - name: chaos-mesh
    values: 
      - "./config/staging/values.yaml"
    createNamespace: true
    namespace: '{{ .Values | get "chaosMesh.namespace" "chaos-mesh" }}'
    chart: chaos-mesh/chaos-mesh
    version: "2.7.2"
    needs:
      - 'linkerd/linkerd-control-plane' 
    installed: {{ .Values | get "chaosMesh.enabled" false }}
    hooks:
      - name: "Apply ingress for Chaos Dashboard when ingress and chaos-mesh are installed"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            # Salir inmediatamente si un comando falla
            set -e
            
            echo "Verifying that Ingress Controller is ready..."
            kubectl wait --for=condition=Available deployment/ingress-nginx-ingress-controller -n "ingress" --timeout=600s
            echo "âœ… Ingress Controller is ready."
            
            echo "Verifying that Chaos Mesh is ready..."
            kubectl wait --for=condition=Available deployment/chaos-dashboard -n "chaos-mesh" --timeout=600s
            echo "âœ… Chaos Mesh is ready."
            
            echo "All dependencies are ready. Applying Ingress for Chaos Dashboard..."
            kubectl apply -f "charts/chaos-mesh/chaos-service.yaml"
            echo "ðŸš€ Ingress for Chaos Dashboard applied successfully."
            kubectl apply -f charts/chaos-mesh/rbac.yaml 
            echo "ðŸš€ RBAC for token generation applied successfully."


  - name: zipkin  
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info 
    needs:
      - "linkerd/linkerd-control-plane" 
    values:
      - "./config/default/values.yaml"
      - "./config/default/zipkin-values.yaml" 
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/zipkin-values.yaml"
    hooks:
      - name: "Wait for linkerd-control-plane to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            NAMESPACE="linkerd"
            echo "Waiting for Linkerd Deployments in namespace $NAMESPACE to be available for Zipkin..."
            
            # Espera por cada Deployment especÃ­fico, no por todos los pods a la vez.
            kubectl wait --for=condition=Available deployment/linkerd-destination -n "$NAMESPACE" --timeout=600s
            kubectl wait --for=condition=Available deployment/linkerd-identity -n "$NAMESPACE" --timeout=600s
            kubectl wait --for=condition=Available deployment/linkerd-proxy-injector -n "$NAMESPACE" --timeout=600s
            echo "All Linkerd control-plane Deployments are ready."
            sleep 10


  - name: discovery
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info 
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/zipkin'
    hooks:
      - name: "Wait for Zipkin service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS="{{ .Values | get "applicationNamespace" "default" }}"
            echo "Waiting for Zipkin deployment in namespace $APP_NS to be available for Discovery..."
            kubectl wait --for=condition=Available deployment/zipkin -n "$APP_NS" --timeout=600s
            echo "Zipkin service is ready."
    values:
      - "./config/default/values.yaml"
      - "./config/default/discovery-values.yaml"     
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/discovery-values.yaml"
      
        
  - name: cloud-config
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/discovery'
    hooks:
      - name: "Wait for Discovery service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS='{{ .Values | get "applicationNamespace" "default" }}'
            echo "Waiting for Discovery deployment in namespace $APP_NS to be available for Cloud-Config..."
            kubectl wait --for=condition=Available deployment/discovery -n "$APP_NS" --timeout=600s
            echo "Discovery service is ready."
    values:
      - "./config/default/values.yaml"
      - "./config/default/cloud-config-values.yaml"
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/cloud-config-values.yaml"

  - name: api-gateway
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/cloud-config'
    hooks:
      - name: "Wait for Cloud-Config service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS='{{ .Values | get "applicationNamespace" "default" }}'
            echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for API-Gateway..."
            kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=600s
            echo "Cloud-Config service is ready."
    values:
      - "./config/default/values.yaml"
      - "./config/default/api-gateway-values.yaml"
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/api-gateway-values.yaml"

  - name: proxy-client
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/cloud-config'
    hooks:
      - name: "Wait for Cloud-Config service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS='{{ .Values | get "applicationNamespace" "default" }}'
            echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Proxy-Client..."
            kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=600s
            echo "Cloud-Config service is ready."
    values:
      - "./config/default/values.yaml"
      - "./config/default/proxy-client-values.yaml"
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/proxy-client-values.yaml"

  - name: user-service
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/cloud-config'
    hooks:
      - name: "Wait for Cloud-Config service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS='{{ .Values | get "applicationNamespace" "default" }}'
            echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for User-Service..."
            kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=600s
            echo "Cloud-Config service is ready for User-Service."
    values:
      - "./config/default/values.yaml"
      - "./config/default/user-service-values.yaml"
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/user-service-values.yaml"

  - name: favourite-service
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/cloud-config'
    hooks:
      - name: "Wait for Cloud-Config service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS='{{ .Values | get "applicationNamespace" "default" }}'
            echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Favourite-Service..."
            kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=600s
    values:
      - "./config/default/values.yaml"
      - "./config/default/favourite-service-values.yaml"
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/favourite-service-values.yaml"

  - name: order-service
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/cloud-config'
    hooks:
      - name: "Wait for Cloud-Config service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS='{{ .Values | get "applicationNamespace" "default" }}'
            echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Order-Service..."
            kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=600s
            echo "Cloud-Config service is ready for Order-Service."
    values:
      - "./config/default/values.yaml"
      - "./config/default/order-service-values.yaml"
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/order-service-values.yaml"

  - name: payment-service
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/cloud-config'
    hooks:
      - name: "Wait for Cloud-Config service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS='{{ .Values | get "applicationNamespace" "default" }}'
            echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Payment-Service..."
            kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=600s
            echo "Cloud-Config service is ready for Payment-Service."
    values:
      - "./config/default/values.yaml"
      - "./config/default/payment-service-values.yaml"
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/payment-service-values.yaml"

  - name: product-service
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/cloud-config'
    hooks:
      - name: "Wait for Cloud-Config service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS='{{ .Values | get "applicationNamespace" "default" }}'
            echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Product-Service..."
            kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=600s
            echo "Cloud-Config service is ready for Product-Service."
    values:
      - "./config/default/values.yaml"
      - "./config/default/product-service-values.yaml"
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/product-service-values.yaml"

  - name: shipping-service
    namespace: '{{ .Values | get "applicationNamespace" "default" }}'
    chart: ./charts/common-app
    version: "1.0.0"
    missingFileHandler: Info
    needs:
      - '{{ .Values | get "applicationNamespace" "default" }}/cloud-config'
    hooks:
      - name: "Wait for Cloud-Config service to be ready"
        events: ["presync"]
        showlogs: true
        command: "bash"
        args:
          - "-c"
          - |
            set -e
            APP_NS='{{ .Values | get "applicationNamespace" "default" }}'
            echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Shipping-Service..."
            kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=600s 
            echo "Cloud-Config service is ready for Shipping-Service."
    values:
      - "./config/default/values.yaml"
      - "./config/default/shipping-service-values.yaml"
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/shipping-service-values.yaml"