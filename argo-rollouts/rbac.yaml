# ================================================================
# Role in 'default' namespace: Manage ConfigMaps and HTTPRoutes
# ================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-rollouts-app-namespace-permissions
  namespace: default
rules:
  # Allow Argo Rollouts to manage ConfigMaps in the default namespace
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

  # Allow updating HTTPRoutes (for Gateway API traffic switching)
  - apiGroups: ["gateway.networking.k8s.io"]
    resources: ["httproutes"]
    verbs: ["get", "list", "watch", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-rollouts-app-namespace-permissions-binding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: argo-rollouts
    namespace: argo-rollouts  # The namespace where the controller runs
roleRef:
  kind: Role
  name: argo-rollouts-app-namespace-permissions
  apiGroup: rbac.authorization.k8s.io
---
# ================================================================
# ClusterRole: Allow Argo Rollouts to proxy access to Prometheus
# ================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-rollouts-prometheus-access
rules:
  # Allow proxy GET access to services and pods (specifically Prometheus)
  - apiGroups: [""]
    resources: ["services", "services/proxy", "pods", "pods/proxy"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-rollouts-prometheus-access-binding
subjects:
  - kind: ServiceAccount
    name: argo-rollouts
    namespace: argo-rollouts
roleRef:
  kind: ClusterRole
  name: argo-rollouts-prometheus-access
  apiGroup: rbac.authorization.k8s.io
