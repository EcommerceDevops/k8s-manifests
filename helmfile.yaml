environments:
  development:
    values:
      - "./config/development/values.yaml"

repositories:
  - name: linkerd-edge
    url: https://helm.linkerd.io/edge
  - name: linkerd
    url: https://helm.linkerd.io/stable

hooks:
  - name: "Annotate Default Namespace for Linkerd Injection" 
    events: ["prepare"] 
    showlogs: true    
    command: "kubectl"
    args:
      - "annotate"
      - "namespace"
      - "default"                     
      - "linkerd.io/inject=enabled"   
      - "--overwrite"                 

---

releases:
  
  - name: linkerd-crds
    namespace: "{{ .Environment.Values.linkerd.namespace | default \"linkerd\" }}"
    chart: linkerd-edge/linkerd-crds
    version: "2025.5.4" 
    values:
      - installGatewayAPI: "{{ .Environment.Values.linkerd.installGatewayAPI | default true }}"
    

  - name: linkerd-control-plane
    namespace: "{{ .Environment.Values.linkerd.namespace | default \"linkerd\" }}"
    chart: linkerd-edge/linkerd-control-plane
    version: "2025.5.4" 
    needs:
      - "{{ .Environment.Values.linkerd.namespace | default \"linkerd\" }}/linkerd-crds"
    values:
      - "./config/development/secrets/linkerd-secrets.yaml"
      - proxyInit:
          runAsRoot: true
    hooks:  
    - name: "Wait for Linkerd CRDs to be established"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          CRDS_TO_WAIT_FOR=(
          "authorizationpolicies.policy.linkerd.io"        
          "egressnetworks.policy.linkerd.io"               
          "externalworkloads.workload.linkerd.io"          
          "httplocalratelimitpolicies.policy.linkerd.io"   
          "httproutes.policy.linkerd.io"                   
          "meshtlsauthentications.policy.linkerd.io"       
          "networkauthentications.policy.linkerd.io"       
          "serverauthorizations.policy.linkerd.io"         
          "servers.policy.linkerd.io"                      
          "serviceprofiles.linkerd.io"
          )
          echo "Waiting for Linkerd CRDs to be established before deploying control-plane..."
          for crd in "${CRDS_TO_WAIT_FOR[@]}"; do
            echo "Waiting for CRD: $crd"
            kubectl wait --for condition=established "crd/$crd" --timeout=180s
          done
          echo "All specified Linkerd CRDs are established."

          
  - name: zipkin
    namespace: "{{ .Environment.Values.applicationNamespace | default \"default\" }}"
    chart: ./charts/zipkin
    version: "1.0.0"
    needs:
      - "linkerd/linkerd-control-plane" 
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/zipkin-values.yaml"
    hooks:
    - name: "Wait for linkerd-control-plane to be ready" # Este hook ya lo tienes y es bueno.
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          NAMESPACE="{{ .Environment.Values.linkerd.namespace | default "linkerd" }}"
          echo "Waiting for all pods in Linkerd namespace ($NAMESPACE) to be Ready for Zipkin..."
          kubectl wait --for=condition=Ready pods --all -n "$NAMESPACE" --timeout=180s
          echo "All Linkerd control-plane pods are ready."
          sleep 10 


  - name: discovery
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/discovery
    version: "1.0.0"
    needs:  
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/zipkin'
    hooks: # 
    - name: "Wait for Zipkin service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          echo "Waiting for Zipkin deployment in namespace $APP_NS to be available for Discovery..."
          kubectl wait --for=condition=Available deployment/zipkin -n "$APP_NS" --timeout=300s
          echo "Zipkin service is ready."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/discovery-values.yaml"

  - name: cloud-config
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/cloud-config
    version: "1.0.0"
    needs:
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/discovery'
    hooks: 
    - name: "Wait for Discovery service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          # IMPORTANTE: Cambia 'deployment/discovery' si tu chart de Discovery usa un nombre diferente.
          echo "Waiting for Discovery deployment in namespace $APP_NS to be available for Cloud-Config..."
          kubectl wait --for=condition=Available deployment/discovery -n "$APP_NS" --timeout=300s
          echo "Discovery service is ready."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/cloud-config-values.yaml"

  - name: api-gateway
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/api-gateway
    version: "1.0.0"
    needs:
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/cloud-config'
    hooks: 
    - name: "Wait for Cloud-Config service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          # IMPORTANTE: Cambia 'deployment/cloud-config' si tu chart de Cloud-Config usa un nombre diferente.
          echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for API-Gateway..."
          kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=300s
          echo "Cloud-Config service is ready."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/api-gateway-values.yaml"


  - name: proxy-client
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/proxy-client
    version: "1.0.0"
    needs:
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/cloud-config'
    hooks:
    - name: "Wait for Cloud-Config service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          # IMPORTANTE: Cambia 'deployment/cloud-config' si tu chart de Cloud-Config usa un nombre diferente.
          echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Proxy-Client..."
          kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=300s
          echo "Cloud-Config service is ready."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/proxy-client-values.yaml"




  - name: user-service
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/user-service
    version: "1.0.0"
    needs:
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/cloud-config'
    hooks:
    - name: "Wait for Cloud-Config service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for User-Service..."
          kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=300s
          echo "Cloud-Config service is ready for User-Service."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/user-service-values.yaml"

  - name: favourite-service
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/favourite-service
    version: "1.0.0"
    needs:
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/cloud-config'
    hooks:
    - name: "Wait for Cloud-Config service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Favourite-Service..."
          kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=300s
          echo "Cloud-Config service is ready for Favourite-Service."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/favourite-service-values.yaml"

  - name: order-service
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/order-service
    version: "1.0.0"
    needs:
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/cloud-config'
    hooks:
    - name: "Wait for Cloud-Config service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Order-Service..."
          kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=300s
          echo "Cloud-Config service is ready for Order-Service."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/order-service-values.yaml"

  - name: payment-service
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/payment-service
    version: "1.0.0"
    needs:
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/cloud-config'
    hooks:
    - name: "Wait for Cloud-Config service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Payment-Service..."
          kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=300s
          echo "Cloud-Config service is ready for Payment-Service."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/payment-service-values.yaml"

  - name: product-service
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/product-service
    version: "1.0.0"
    needs:
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/cloud-config'
    hooks:
    - name: "Wait for Cloud-Config service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Product-Service..."
          kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=300s
          echo "Cloud-Config service is ready for Product-Service."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/product-service-values.yaml"

  - name: shipping-service
    namespace: '{{ .Environment.Values.applicationNamespace | default "default" }}'
    chart: ./charts/shipping-service
    version: "1.0.0"
    needs:
      - '{{ .Environment.Values.applicationNamespace | default "default" }}/cloud-config'
    hooks:
    - name: "Wait for Cloud-Config service to be ready"
      events: ["presync"]
      showlogs: true
      command: "bash"
      args:
        - "-c"
        - |
          set -e
          APP_NS='{{ .Environment.Values.applicationNamespace | default "default" }}'
          echo "Waiting for Cloud-Config deployment in namespace $APP_NS to be available for Shipping-Service..."
          kubectl wait --for=condition=Available deployment/cloud-config -n "$APP_NS" --timeout=300s
          echo "Cloud-Config service is ready for Shipping-Service."
    values:
      - "./config/{{ .Environment.Name }}/values.yaml"
      - "./config/{{ .Environment.Name }}/shipping-service-values.yaml"